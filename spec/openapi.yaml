openapi: 3.0.0
info:
  title: "Kriterion API"
  description: |
    # Using the API

    ## Object Hierarachy

    ```
    Standard
    ├── Item
    |   └── Resource
    |       └── Event
    └── Section
        ├── Section
        |   └── Section.. etc
        └── Item
            └── Resource
                └── Event
    ```

    **The Blurb**

    *A `standard` represents a compliance standard such as the STIG standard for RHEL 7. A standard is usually made up of many `sections` such as "Networking" or "User Access", however they may have direct items under them too. `Sections` are purely for organisation and usually have a name and a number such as 3. Each section may have many items and subsections such as 3.1, 3.2, 3.2.1 etc. An `item` represents a thing that the compliance standard has a particular opinion about. This might be that "All .rhosts files should be absent" or similar. An `item` may be implemented by one or many `resources`. On some servers it might take just one resource to ensure that an item is compliant, on others it might take 7. Each resource then has `events`. Hopefully most of the time the events are "unchanged" which would mean that the resource is compliant on that server, however they may have a pending noop action or be failing which would mean that particular resource and by extension, item, section and standard are to some degree non-compliant.*

    # Puppet Integration

    In order for the compliance API to be able to query the Puppet database and filter out events/resources that are not relevant to compliance, all resoures that are to appear in the compliance API must be tagged. The Compliance API server will then extract data based on these tags.

    Each resource must have at least the following tags:

      - **Standard Name:** The name of the standard, as returned by the `/standard` endpoint
      - **Item Number:** The number of the item that the resource is relevant to. This must match the `item_syntax` regular expression

    An example of enforcing item `V-38598` from the `STIG_RHEL_6` standard would be as follows:

    ```puppet
    service { 'rexecd':
      ensure => stopped,
      enable => false,
      tag    => [
        'STIG_RHEL_6',
        'V-38598',
      ],
    }
    ```

    These tags can be applied on a per-resource basis, or to an entire scope using the [tag()](https://puppet.com/docs/puppet/5.3/lang_tags.html#the-tag-function) function.

    Properly tagging resources is the only thing that is required from the Puppet side in order to use this API.
  version: "0.1.0"
  contact:
    email: "dylanratcliffe@outlook.com"
    name: "Dylan Ratcliffe"
    url: "https://github.com/dylanratcliffe"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "https://kriterion.youcan.dance"
    description: Main example API
tags:
  - name: event
    description: Gives details of events, a child of resources
  - name: item
    description: Returns items, these are things that are actually compliant or non-compliant
  - name: resource
    description: Gives details of resources, a child of items
  - name: section
    description: Gives details of sections, a child of standards
  - name: standard
    description: Gives hierarchical infomration about standards. Can be used to get all data in one query, or to iteratively build queries.
#   externalDocs:
#     description: Find out more
#     url: "http://swagger.io"
# - name: "store"
#   description: Access to Petstore orders
# - name: "user"
#   description: Operations about user
#   externalDocs:
#     description: Find out more about our store
#     url: "http://swagger.io"

#
# Paths
#
paths:
  #
  # /standards Endpoint
  #
  '/standards':
    get:
      summary: Returns all standards.
      operationId: getStandards
      tags:
        - standard
      parameters:
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Array of all standard objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicStandard'
                    - $ref: '#/components/schemas/FullStandard'
                  discriminator:
                    propertyName: object_type
  '/standards/{standard}':
    get:
      summary: Returns one specific standard.
      operationId: getStandard
      tags:
        - standard
      parameters:
        - name: standard
          in: path
          required: true
          description: "`name` of the standard"
          schema:
            type : string
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns one standard
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BasicStandard'
                  - $ref: '#/components/schemas/FullStandard'
                discriminator:
                  propertyName: object_type
        '404':
          $ref: '#/components/responses/Error'
  '/standards/{standard}/sections':
    get:
      summary: Return all sections for a given standard.
      operationId: getStandardSections
      tags:
        - standard
      parameters:
        - $ref: '#/components/parameters/Standard'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns all sections for a given standard
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicSection'
                    - $ref: '#/components/schemas/FullSection'
        '404':
          $ref: '#/components/responses/Error'
  '/standards/{standard}/items':
    get:
      summary: Get all items within a standard.
      operationId: getStandardItems
      tags:
        - standard
      parameters:
        - $ref: '#/components/parameters/Standard'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns all items for all standards
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicItem'
                    - $ref: '#/components/schemas/FullItem'
        '404':
          $ref: '#/components/responses/Error'
  '/sections':
    get:
      summary: Return all sections.
      operationId: getAllSections
      tags:
        - section
      parameters:
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns all sections for a given standard
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicSection'
                    - $ref: '#/components/schemas/FullSection'
        '404':
          $ref: '#/components/responses/Error'
  '/sections/{uuid}':
    get:
      summary: Return a given section
      operationId: getSection
      tags:
        - section
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns one section
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BasicSection'
                  - $ref: '#/components/schemas/FullSection'
        '404':
          $ref: '#/components/responses/Error'
  '/sections/{uuid}/sections':
    get:
      summary: Return all subsections for a given section
      operationId: getSectionSubsections
      tags:
        - section
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns all sections for a given standard
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicSection'
                    - $ref: '#/components/schemas/FullSection'
        '404':
          $ref: '#/components/responses/Error'
  '/sections/{uuid}/items':
    get:
      summary: Get all items for a section.
      operationId: getSectionItems
      tags:
        - section
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns all items for all standards
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicItem'
                    - $ref: '#/components/schemas/FullItem'
        '404':
          $ref: '#/components/responses/Error'
  '/items':
    get:
      summary: Search for items.
      operationId: getItems
      tags:
        - item
      parameters:
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns all items for all standards
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicItem'
                    - $ref: '#/components/schemas/FullItem'
        '404':
          $ref: '#/components/responses/Error'
  '/items/{uuid}':
    get:
      summary: Returns one specific item
      operationId: getItem
      tags:
        - item
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Returns the queried item
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BasicItem'
                  - $ref: '#/components/schemas/FullItem'
        '404':
          $ref: '#/components/responses/Error'
  '/items/{uuid}/resources':
    get:
      summary: Queries resources
      operationId: getItemResources
      tags:
        - item
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Array of all resources item
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicResource'
                    - $ref: '#/components/schemas/FullResource'
        '404':
          $ref: '#/components/responses/Error'
  '/resources':
    get:
      summary: Queries resources
      operationId: getResources
      tags:
        - resource
      parameters:
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Array of all resources
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/BasicResource'
                    - $ref: '#/components/schemas/FullResource'
        '404':
          $ref: '#/components/responses/Error'
  '/resources/{uuid}':
    get:
      summary: Get a given resource
      operationId: getResource
      tags:
        - resource
      parameters:
        - name: uuid
          in: path
          required: true
          description: "`UUID` of the resource"
          schema:
            $ref: '#/components/schemas/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: The resource that matches the query
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BasicResource'
                  - $ref: '#/components/schemas/FullResource'
        '404':
          $ref: '#/components/responses/Error'
  '/resources/{uuid}/events':
    get:
      summary: Queries events for a given resource
      operationId: getResourceEvents
      tags:
        - resource
      parameters:
        - name: uuid
          in: path
          required: true
          description: "`UUID` of the resource"
          schema:
            $ref: '#/components/schemas/UUID'
        - $ref: '#/components/parameters/DetailLevel'
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Array of all events for a given resource
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/Error'
  '/events':
    get:
      summary: Queries events
      operationId: getEvents
      tags:
        - event
      parameters:
        - $ref: '#/components/parameters/AsOfTime'
      responses:
        '200':
          description: Array of all events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/Error'

#
# Components
#
components:
  #
  # Parameters
  #
  parameters:
    Standard:
      name: standard
      in: path
      required: true
      description: "`name` of the standard"
      schema:
        type : string

    Item:
      name: item
      in: path
      required: true
      description: "`id` of the item"
      schema:
        type : string

    DetailLevel:
      description: "Level of detail to return.\n\n**basic:** includes only the object itself, without any children\n\n**full:** Returns the object and all children, grandchildren, etc."
      in: query
      name: level
      schema:
        type: string
        enum:
          - basic
          - full
        default: basic
      required: false

    UUID:
      name: uuid
      in: path
      required: true
      description: "`uuid` of object that is being queried"
      schema:
        $ref: '#/components/schemas/UUID'
    
    AsOfTime:
      name: as_of
      in: query
      required: false
      description: "From what date/time the data should be taken as per [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14). This only makes sense when doing a query that returns events such as /events or any query with level = full e.g. `2018-09-15T15:53:00+05:00`"
      schema:
        type: string
        format: date-time

  #
  # Schemas
  #
  schemas:
    BasicStandard:
      type: object
      properties:
        object_type:
          type: string
          enum:
            - BasicStandard
        name:
          type: string
        date:
          type: string
          format: date
          description: Date of publication of the standard
        description:
          type: string
          description: Long description of the standard. This should be expected to be markdown by anything consuming it
        title:
          type: string
          description: Short title of the standard
        version:
          type: string
          description: Free text version
        item_syntax:
          type: object
          description: "Regular expression that is used to determine which other tag on each resource determines the \"item\" that it is relevant to. If this contains capturing groups, the groups are used to determine sections and subsections e.g. `^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.$` would mean that the API is expecting versions like so:\n\n `1.2.3`\n\n And that the subsections are as follows:\n\n `[1, 2, 3]`\n\n If the regular expression that is provided does not have any capturin groups, we can assume that the standard does not have sections. In this scenario the `sections` attribute will return `null` and hen doing the full compliance query everything will just come back in a flat thing. The structure of the return value here uses Ruby's style of serialising regex to JSON but should be interoperable with other languages with little effort. Someone should probably standardise this."
          properties:
            $regex:
              type: string
              description: "String representation of the Ruby style regex"
            $options:
              type: string
              description: "Options for the regex, such as `g` (global) or `m` (multiline)"
        section_separator:
          type: string
          description: This is what is used to construct the names of each section. If a section is found that has subsections, the capturing groups will be joined using the separator giving nice subsection names such as \"1.1.3\". If this is set to `null`, subsections will not be joined and will be names exactly as captured in the capturing group.
        sections:
          type: array
          nullable: true
          description: "A list of references to subsections"
          items:
            $ref: "#/components/schemas/Reference"
        items:
          type: array
          nullable: true
          description: "A list of references to direct child items"
          items:
            $ref: "#/components/schemas/Reference"
        compliance:
          type: object
          description: "This should return a summary of the compliance information of all `items` and `sections` under this standard. you could possibly argue that this should also return the `resource` and `event` info but I feel like that's probably a bit much. It can always be added later if required."
          properties:
            compliant:
              type: boolean
              description: "Returns true if all child `items`, including those from subsections, also return `true` for this value."
            items:
              allOf:
                - $ref: '#/components/schemas/ComplianceCount'
                - description: "This is the compliance state of all items that are **direct** decendants of this standard."
            sections:
              allOf:
                - $ref: '#/components/schemas/ComplianceCount'
                - description: "Compliance count of all sections based on their boolean compliance value"
    FullStandard:
      allOf:
        - $ref: '#/components/schemas/BasicStandard'
        - type: object
          properties:
            # TODO: Is CamelCase the standard for REST APIs? It seems a bit incongruent that an underscore_delimited parameter would resturn a CamelCase value... I don't like it...
            object_type:
              type: string
              enum:
                - FullStandard
            sections:
              type: array
              nullable: true
              description: "Remember that is is possible that a standard will have no sections, just items."
              items:
                $ref: "#/components/schemas/FullSection"
            items:
              type: array
              nullable: true
              description: "It is possible for a standard to have no sections, only items. This is provided for that purpose however it will usually be `null`"
              items:
                $ref: "#/components/schemas/FullItem"
    BasicSection:
      type: "object"
      description: "Hash containing the names and descriptions of all the sections and their items and subsections. Sections are dynamically generated from the resources that have been discovered, with the `description` coming from the standard backend. It is important that the final capturing group for each section is ignored. This means that if you have a standard like `5.12.3` and one like `1.2.35.123` you don't end up with a section called `5.12.3` with only one thing in it."
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: "The name of the section is just all the capturing groups joined with the `section_separator` from the `standard`"
        title:
          type: string
          description: "Descriptive short title for the section"
        standard:
          type: string
          description: "Name of the standard that the section is relevant to. This is not likely to be very useful as the structure of the `/standards` and `/compliance` endpoints will imply the standard from the structure of the return value, but we have the info so we may as well provide it."
        description:
          type: string
          description: "Description of the section. This comes from the standard backend, should support markdown as should all long text fields."
        items:
          type: array
          items:
            $ref: "#/components/schemas/Reference"
        sections:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Reference"
        compliance:
          type: object
          description: "This should return a summary of the compliance information of all `items` under this section. you could possibly argue that this should also return the `resource` and `event` info but I feel like that's probably a bit much. It can always be added later if required."
          properties:
            compliant:
              type: boolean
              description: "Returns true if all child `items`, including those from subsections, also return `true` for this value."
            direct_items:
              allOf:
                - $ref: '#/components/schemas/ComplianceCount'
                - description: "This is the compliance state of all items that are direct decendants of this section. Subsections are not counted"
            all_items:
              allOf:
                - $ref: '#/components/schemas/ComplianceCount'
                - description: "Compliance state of all direct child items and and the child items of all subsecions, and their subsecions, and their subsecions... you get it"
            sections:
              allOf:
                - $ref: '#/components/schemas/ComplianceCount'
                - description: "Compliance count of all subsections based on their boolean compliance value"
    FullSection:
      allOf:
        - $ref: '#/components/schemas/BasicSection'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/FullItem"
            sections:
              type: array
              nullable: true
              items:
                $ref: "#/components/schemas/FullSection"
    BasicItem:
      type: "object"
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        id:
          type: string
          description: The ID of the item is the `subsection_path`, joined with the `subsection_separator` from the `standard` e.g. `1.1.1.3`
        title:
          type: string
          description: Short title
        description:
          type: string
          nullable: true
          description: Description of the item. This should support markdown
        severity:
          type: string
          nullable: true
          description: A string representing the severity of the `item`. Possibly the `standard` should define some way of telling actually how severe something is so that it can have a colour or something.
        parent_uuid:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - description: "UUID of the section/standard that this item is relevant to. Can also return `null` if the item is a direct child of a standard."
              nullable: true
        section_path:
          type: array
          description: This is an array of the capturing groups that have been found for this item. If there are no subsections this will be an empty array
          items:
            type: "integer"
        standard:
          type: string
          description: "Name of the standard this item is relevant to"
        resources:
          type: array
          description: "References to the resources within the starndard"
          nullable: true
          items:
            $ref: '#/components/schemas/Reference'
        compliance:
          type: object
          nullable: true
          description: "This provides the basic `compliant` boolean value, plus details around the compliance state of both resources and their subsequent events. This is meant to take load off the client. A UI can use this information to choose how the level of compliance is represented. e.g. 50% compliance could mean that of the two resources that enforce this standard, one of them has at least one non-compliant event. 50% compliance could also mean that both resources which enforce this standard have failures on 50% of their nodes. The first example represents a much lower rate of non-compliance overall (probably), but it is up to the end user how they choose to interpret the data. It would also allow for the use of a multi-layered doughnut chart which should be a very nice way to represent this. Resources around the outside and events on the inside."
          properties:
            compliant:
              type: boolean
              description: "Returns true if all resources are compliant, false if any are non-compliant in any way"
            resources:
              $ref: '#/components/schemas/ComplianceCount'
            events:
              $ref: '#/components/schemas/ComplianceCount'
    FullItem:
      allOf:
        - $ref: '#/components/schemas/BasicItem'
        - type: object
          properties:
            resources:
              type: array
              description: "Array of all the resources that are used to enforce this standard."
              nullable: true
              items:
                $ref: '#/components/schemas/FullResource'
    BasicResource:
      type: object
      description: "This represents a Puppet resource. The property names and values are the same as those returned by the PuppetDB API with the exception of things that will change on a per-host basis such as `parameters`, `certname`, `resource` and `exported`."
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        tags:
          type: array
          description: From PuppetDB
          items:
            type: string
        file:
          type: string
          description: From PuppetDB
        type:
          type: string
          description: From PuppetDB
        title:
          type: string
          description: From PuppetDB
        attribute:
          type: string
          description: "This describes the attribute that is relevant to the specific item, it does not come from PuppetDB. It is possible that one resource could be relevant to multiple items, possibly from multiple standards. The attribute proprty allows us to differentiate which items are out of compliance when a resource has failed or is in noop mode."
        line:
          type: integer
          description: From PuppetDB
        events:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
        compliance:
          type: object
          properties:
            compliant:
              type: boolean
              description: "Returns true if all events are compliant, false if any are non-compliant in any way"
            events:
              allOf: # Merge the description in here
                - description: "Summary of how many compliant and non-compliant events exist. This is provided for flexibility so that the UI can represent the data in any format it wants without undue computational stress on the client. Especially useful if there are 100,000 servers that have the same resource on them. Good luck getting JavaScript to calculate that in Internet Explorer."
                - $ref: '#/components/schemas/ComplianceCount'
    FullResource:
      allOf:
        - $ref: '#/components/schemas/BasicResource'
        - type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/Event'
    Event:
      type: object
      description: "Represents a Puppet event, however it it used slightly differently in this context. The fact that there was an event means that something was or is currently out of compliance. Noop/Failure means that it is currently out of compliance, and a change means that it was out of compliance but has now been fixed."
      properties:
        new_value:
          type: string
          description: From PuppetDB
        report:
          type: string
          description: From PuppetDB
        corrective_change:
          type: boolean
          description: From PuppetDB
        run_start_time:
          type: string
          format: date-time
          description: From PuppetDB
        property:
          type: string
          description: From PuppetDB
        file:
          type: string
          description: From PuppetDB
        old_value:
          type: string
          description: From PuppetDB
        containing_class:
          type: string
          description: From PuppetDB
        line:
          type: integer
          description: From PuppetDB
        resource_type:
          type: string
          description: From PuppetDB
        status:
          type: string
          enum:
            - success
            - failure # More to come, noop etc.
          # TODO: Change this to an enum with all the possible values that PuppetDB will return
          description: From PuppetDB
        configuration_version:
          type: string
          description: From PuppetDB
        resource_title:
          type: string
          description: From PuppetDB
        environment:
          type: string
          description: From PuppetDB
        timestamp:
          type: string
          format: date-time
          description: From PuppetDB
        run_end_time:
          type: string
          format: date-time
          description: From PuppetDB
        report_receive_time:
          type: string
          format: date-time
          description: From PuppetDB
        containment_path:
          type: array
          description: From PuppetDB
          items:
            type: string
        certname:
          type: string
          description: From PuppetDB
        message:
          type: string
          description: From PuppetDB
        compliant?:
          type: boolean
          description: Wheather or not the resource is compliant, based on the `status`
    ComplianceCount:
      type: object
      properties:
        percentage:
          description: "Percentage of things that are fully compliant (have zero non-compliant events)"
          type: number
          format: float
          minimum: 0
          maximum: 1
        compliant:
          type: integer
        non_compliant:
          type: integer
        total:
          type: integer
    UUID:
      type: string
      description: "UUID as per RFC 4122"
      pattern: '[0-9A-f]{8}-[0-9A-f]{4}-[0-9A-f]{4}-[0-9A-f]{4}-[0-9A-f]{12}'
    Reference:
      type: object
      description: "A reference to another object in the API"
      properties:
        href:
          type: string # TODO: Is there are native data type for URIs?
          description: "Reference to the API request that will return the referenced object"

  #
  # Responses
  #
  responses:
    Error:
      description: A generic error
      content:
        application/json:
          schema:
            type: object
            description: Describes an error.
            properties:
              error:
                type: string
                enum:
                  - Not Found
                  - Unknown Error
              code:
                type: integer
              message:
                type: string
                nullable: true
externalDocs:
  description: Github Page
  url: "https://github.com/dylanratcliffe/kriterion"
